document.addEventListener(\'DOMContentLoaded\', () => {\n    const token = localStorage.getItem(\'adminToken\');\n    if (!token) {\n        window.location.href = \'admin-login.html\';\n        return;\n    }\n\n    const API_BASE_URL = \'http://localhost:3000/api\';\n\n    // --- Element Selectors ---\n    const logoutLink = document.getElementById(\'logout-link\');\n    const voterRegForm = document.getElementById(\'voter-registration-form\');\n    const electionForm = document.getElementById(\'election-form\');\n    const addPositionForm = document.getElementById(\'add-position-form\');\n    const addCandidateForm = document.getElementById(\'add-candidate-form\');\n    const positionsSelect = document.getElementById(\'candidate-position\');\n    const positionsUl = document.getElementById(\'positions-ul\');\n    const electionStatusDiv = document.getElementById(\'election-status\');\n\n    // --- Event Listeners ---\n\n    logoutLink.addEventListener(\'click\', (e) => {\n        e.preventDefault();\n        localStorage.removeItem(\'adminToken\');\n        window.location.href = \'admin-login.html\';\n    });\n\n    // Handle voter registration\n    voterRegForm.addEventListener(\'submit\', async (e) => {\n        e.preventDefault();\n        const studentId = document.getElementById(\'voter-student-id\').value;\n        const metamaskAddress = document.getElementById(\'voter-metamask-address\').value;\n        const password = document.getElementById(\'voter-password\').value;\n\n        try {\n            const response = await fetch(`${API_BASE_URL}/voters/register\`, {\n                method: \'POST\',\n                headers: { \'Content-Type\': \'application/json\', \'Authorization\': `Bearer ${token}` },\n                body: JSON.stringify({ student_id: studentId, metamask_address: metamaskAddress, password })\n            });\n            const data = await response.json();\n            if (response.ok) {\n                alert(\'Voter registered successfully!\');\n                voterRegForm.reset();\n            } else {\n                alert(`Failed to register voter: ${data.message}`);\n            }\n        } catch (err) {\n            alert(\'An error occurred. Please check the server connection.\');\n        }\n    });\n\n    // Handle setting election period\n    electionForm.addEventListener(\'submit\', async (e) => {\n        e.preventDefault();\n        const electionName = document.getElementById(\'election-name\').value;\n        const startTime = document.getElementById(\'election-start\').value;\n        const endTime = document.getElementById(\'election-end\').value;\n\n        try {\n            const response = await fetch(`${API_BASE_URL}/elections\`, {\n                method: \'POST\',\n                headers: { \'Content-Type\': \'application/json\', \'Authorization\': `Bearer ${token}` },\n                body: JSON.stringify({ name: electionName, start_time: startTime, end_time: endTime })\n            });\n            const data = await response.json();\n            if (response.ok) {\n                alert(\'Election period set successfully!\');\n                loadElectionStatus();\n            } else {\n                alert(`Failed to set election period: ${data.message}`);\n            }\n        } catch (err) {\n            alert(\'An error occurred. Please check the server connection.\');\n        }\n    });\n\n    // Handle adding a new position\n    addPositionForm.addEventListener(\'submit\', async (e) => {\n        e.preventDefault();\n        const positionName = document.getElementById(\'position-name\').value;\n        try {\n            const response = await fetch(`${API_BASE_URL}/positions\`, {\n                method: \'POST\',\n                headers: { \'Content-Type\': \'application/json\', \'Authorization\': `Bearer ${token}` },\n                body: JSON.stringify({ name: positionName })\n            });\n            const data = await response.json();\n            if (response.ok) {\n                alert(\'Position added successfully!\');\n                addPositionForm.reset();\n                fetchPositions();\n            } else {\n                alert(`Failed to add position: ${data.message}`);\n            }\n        } catch (err) {\n            alert(\'An error occurred. Please check the server connection.\');\n        }\n    });\n\n    // Handle adding a new candidate\n    addCandidateForm.addEventListener(\'submit\', async (e) => {\n        e.preventDefault();\n        const candidateName = document.getElementById(\'candidate-name\').value;\n        const positionId = positionsSelect.value;\n        const imageUrl = document.getElementById(\'candidate-image\').value;\n        const manifesto = document.getElementById(\'candidate-manifesto\').value;\n\n        if (!positionId) {\n            alert(\'Please select a position for the candidate.\');\n            return;\n        }\n\n        try {\n            const response = await fetch(`${API_BASE_URL}/candidates\`, {\n                method: \'POST\',\n                headers: { \'Content-Type\': \'application/json\', \'Authorization\': `Bearer ${token}` },\n                body: JSON.stringify({ name: candidateName, position_id: parseInt(positionId), image_url: imageUrl, manifesto })\n            });\n            const data = await response.json();\n            if (response.ok) {\n                alert(\'Candidate added successfully!\');\n                addCandidateForm.reset();\n            } else {\n                alert(`Failed to add candidate: ${data.message}`);\n            }\n        } catch (err) {\n            alert(\'An error occurred. Please check the server connection.\');\n        }\n    });\n\n    // --- Data Loading Functions ---\n\n    // Fetch positions for dropdown and list\n    async function fetchPositions() {\n        try {\n            const response = await fetch(`${API_BASE_URL}/positions\`, { headers: { \'Authorization\': `Bearer ${token}` } });\n            if (!response.ok) throw new Error(\'Failed to fetch positions\');\n            const positions = await response.json();\n\n            positionsSelect.innerHTML = \'<option value=\"\">Select a position...</option>\';\n            positionsUl.innerHTML = \'\';\n\n            positions.forEach(position => {\n                const option = document.createElement(\'option\');\n                option.value = position.id;\n                option.textContent = position.name;\n                positionsSelect.appendChild(option);\n\n                const li = document.createElement(\'li\');\n                li.textContent = position.name;\n                positionsUl.appendChild(li);\n            });\n        } catch (error) {\n            console.error(\'Failed to fetch positions:\', error);\n            alert(\'Failed to load positions. The backend might not be running.\');\n        }\n    }\n\n    // Fetch and display election status\n    async function loadElectionStatus() {\n        try {\n            const response = await fetch(`${API_BASE_URL}/elections\`, { headers: { \'Authorization\': `Bearer ${token}` } });\n            if (!response.ok) throw new Error(\'Failed to fetch elections\');\n            const elections = await response.json();\n\n            if (elections.length > 0) {\n                // Display the most recent election\n                const lastElection = elections[elections.length - 1];\n                electionStatusDiv.innerHTML = `\n                    <p><strong>Current Election:</strong> ${lastElection.name}</p>\n                    <p><strong>Starts:</strong> ${new Date(lastElection.start_time).toLocaleString()}</p>\n                    <p><strong>Ends:</strong> ${new Date(lastElection.end_time).toLocaleString()}</p>\n                `;\n            } else {\n                electionStatusDiv.innerHTML = \'<p>No election has been set up yet.</p>\';\n            }\n        } catch (err) {\n            console.error(\'Failed to load election details:\', err);\n            electionStatusDiv.innerHTML = \'<p style=\"color: red;\">Could not load election details.</p>\';\n        }\n    }\n\n    // --- Initial Load ---\n    function initializeDashboard() {\n        fetchPositions();\n        loadElectionStatus();\n    }\n\n    initializeDashboard();\n});\n