document.addEventListener(\'DOMContentLoaded\', () => {\n    const API_BASE_URL = \'http://localhost:3000/api\';\n\n    // --- Element Selectors ---\
    const loginSection = document.getElementById(\'login-section\');\n    const ballotSection = document.getElementById(\'ballot-section\');\n    const loginForm = document.getElementById(\'voter-login-form\');\n    const loginMessage = document.getElementById(\'login-message\');\n    const ballotContainer = document.getElementById(\'ballot-container\');\n    const submitVoteBtn = document.getElementById(\'submit-vote\');\n    const voteStatusMessage = document.getElementById(\'vote-status-message\');\n\n    let selectedCandidates = {}; // Object to store { positionId: candidateId }\n\n    // --- Login Logic ---\
    loginForm.addEventListener(\'submit\', async (e) => {\n        e.preventDefault();\n        const studentId = document.getElementById(\'student-id\').value;\n        const password = document.getElementById(\'password\').value;\n\n        try {\n            const response = await fetch(`${API_BASE_URL}/voters/login\`, {\n                method: \'POST\',\n                headers: { \'Content-Type\': \'application/json\' },\n                body: JSON.stringify({ student_id: studentId, password })\n            });\n\n            const data = await response.json();\n\n            if (response.ok) {\n                // Store token and user info\n                localStorage.setItem(\'voterToken\', data.token);\n                localStorage.setItem(\'studentId\', data.student_id);\n                // Switch to ballot view\n                loginSection.style.display = \'none\';\n                ballotSection.style.display = \'block\';\n                loadBallot();\n            } else {\n                loginMessage.textContent = data.message || \'Login failed.\';\n            }\n        } catch (error) {\n            loginMessage.textContent = \'An error occurred. Please check the server connection.\';\n        }\n    });\n\n    // --- Ballot Loading and Voting Logic ---\
    async function loadBallot() {\n        try {\n            // Fetch all positions and candidates\n            const [positionsRes, candidatesRes] = await Promise.all([\n                fetch(`${API_BASE_URL}/positions\`),\n                fetch(`${API_BASE_URL}/candidates\`)\n            ]);\n\n            if (!positionsRes.ok || !candidatesRes.ok) {\n                throw new Error(\'Failed to load ballot data.\');\n            }\n\n            const positions = await positionsRes.json();\n            const candidates = await candidatesRes.json();\n\n            ballotContainer.innerHTML = \'\'; // Clear previous content\n\n            positions.forEach(position => {\n                const positionSection = document.createElement(\'div\');\n                positionSection.className = \'voting-section\';\n                positionSection.innerHTML = `<h3>${position.name}</h3>`;\n\n                const candidatesList = document.createElement(\'div\');\n                candidatesList.className = \'candidate-list\';\n\n                const candidatesForPosition = candidates.filter(c => c.position_id === position.id);\n\n                candidatesForPosition.forEach(candidate => {\n                    const card = document.createElement(\'div\');\n                    card.className = \'candidate-card\';\n                    card.dataset.candidateId = candidate.id;\n                    card.dataset.positionId = position.id;\n                    card.innerHTML = `\n                        <img src=\"${candidate.image_url}\" alt=\"${candidate.name}\" class=\'candidate-photo\'>\n                        <h4>${candidate.name}</h4>\n                        <p>${candidate.manifesto}</p>\n                    `;\n                    // Event listener for candidate selection\n                    card.addEventListener(\'click\', () => handleCandidateSelection(card, position.id, candidate.id));\n                    candidatesList.appendChild(card);\n                });\n\n                positionSection.appendChild(candidatesList);\n                ballotContainer.appendChild(positionSection);\n            });\n\n        } catch (error) {\n            ballotContainer.innerHTML = `<p style=\'color:red;\'>Error loading ballot: ${error.message}</p>`;\n        }\n    }\n\n    function handleCandidateSelection(selectedCard, positionId, candidateId) {\n        // Deselect other cards in the same position\n        const allCardsInPosition = document.querySelectorAll(`.candidate-card[data-position-id=\'${positionId}\']`);\n        allCardsInPosition.forEach(card => card.classList.remove(\'selected\'));\n\n        // Select the clicked card\n        selectedCard.classList.add(\'selected\');\n\n        // Store the selection\n        selectedCandidates[positionId] = candidateId;\n    }\n\n    // --- Submit Vote Logic ---\
    submitVoteBtn.addEventListener(\'click\', async () => {\n        const voterToken = localStorage.getItem(\'voterToken\');\n        const studentId = localStorage.getItem(\'studentId\'); // You need a way to get the voter ID.\n\n        if (Object.keys(selectedCandidates).length === 0) {\n            voteStatusMessage.textContent = \'Please select at least one candidate.\';\n            return;\n        }\n        \n        // A real voter ID would be decoded from the JWT token on the backend.\n        // For the mock, we will just pass the student ID and the backend will find the voter.\n        voteStatusMessage.textContent = 'Submitting your vote...';\n        voteStatusMessage.style.color = \'blue\';\n\n        try {\n            // In a real app, you might have a single endpoint to submit the whole ballot.\n            // Here, we send a vote for each selected candidate.\n            const votePromises = Object.values(selectedCandidates).map(candidateId => {\n                return fetch(`${API_BASE_URL}/votes/cast\`, {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\', \'Authorization\': `Bearer ${voterToken}` },\n                    body: JSON.stringify({ student_id: studentId, candidate_id: candidateId })\n                });\n            });\n\n            const results = await Promise.all(votePromises);\n\n            // Check if any vote failed\n            const failedVote = results.find(res => !res.ok);\n            if (failedVote) {\n                const errorData = await failedVote.json();\n                throw new Error(errorData.message || \'An error occurred during voting.\');\n            }\n\n            voteStatusMessage.textContent = \'Your vote has been successfully cast!\';\n            voteStatusMessage.style.color = \'green\';\n            submitVoteBtn.disabled = true; // Prevent re-voting\n            localStorage.removeItem(\'voterToken\'); // Invalidate the token after voting\n\n        } catch (error) {\n            voteStatusMessage.textContent = `Error: ${error.message}`;
            voteStatusMessage.style.color = \'red\';\n        }\n    });\n\n    // Check if the user is already logged in (e.g., page refresh)\n    if (localStorage.getItem(\'voterToken\')) {\n        loginSection.style.display = \'none\';\n        ballotSection.style.display = \'block\';\n        loadBallot();\n    }\n});\n