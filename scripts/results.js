document.addEventListener(\'DOMContentLoaded\', () => {\n    const API_BASE_URL = \'http://localhost:3000/api\';\n    const resultsContainer = document.getElementById(\'results-container\');\n    const electionStatusDiv = document.getElementById(\'election-status\');\n    const refreshButton = document.getElementById(\'refresh-results\');\n\n    async function loadResults() {\n        try {\n            const response = await fetch(`${API_BASE_URL}/results\`);\n            if (!response.ok) {\n                throw new Error(\'Failed to fetch results.\');\n            }\n            const results = await response.json();\n\n            // Clear previous results\n            resultsContainer.innerHTML = \'\';\n\n            if (!results || results.length === 0) {\n                resultsContainer.innerHTML = \'<p>No election results are available at this time.</p>\';\n                return;\n            }\n\n            results.forEach(positionResult => {\n                const positionSection = document.createElement(\'div\');\n                positionSection.className = \'position-results\';\n\n                const title = document.createElement(\'h3\');\n                title.textContent = positionResult.position_name;\n                positionSection.appendChild(title);\n\n                if (positionResult.candidates.length === 0) {\n                    positionSection.innerHTML += \'<p>No candidates for this position.</p>\';\n                } else {\n                    positionResult.candidates.forEach(candidate => {\n                        const candidateDiv = document.createElement(\'div\');\n                        candidateDiv.className = \'candidate-result\';\n                        candidateDiv.innerHTML = `\n                            <span class=\'candidate-name\'>${candidate.name}</span>\n                            <span class=\'candidate-votes\'>${candidate.votes} Votes</span>\n                        `;\n                        positionSection.appendChild(candidateDiv);\n                    });\n                }\n                resultsContainer.appendChild(positionSection);\n            });\n\n        } catch (error) {\n            resultsContainer.innerHTML = `<p style=\'color:red;\'>Error loading results: ${error.message}</p>`;\n        }\n    }\n\n    async function loadElectionStatus() {\n        try {\n            const response = await fetch(`${API_BASE_URL}/elections\`);\n            if (!response.ok) throw new Error(\'Failed to fetch election status.\');\n            const elections = await response.json();\n\n            if (elections.length > 0) {\n                const lastElection = elections[elections.length - 1];\n                const now = new Date();\n                const start = new Date(lastElection.start_time);\n                const end = new Date(lastElection.end_time);\n                let status = \'\';\n\n                if (now < start) {\n                    status = `<strong>${lastElection.name}</strong> is scheduled to start on ${start.toLocaleString()}.`;\n                } else if (now > end) {\n                    status = `<strong>${lastElection.name}</strong> has ended on ${end.toLocaleString()}.`;\n                } else {\n                    status = `<strong>${lastElection.name}</strong> is currently active and will end on ${end.toLocaleString()}.`;\n                }\n                electionStatusDiv.innerHTML = status;\n            } else {\n                electionStatusDiv.innerHTML = \'No election is currently scheduled.\';\n            }\n        } catch (error) {\n            electionStatusDiv.innerHTML = `<p style=\'color:red;\'>Could not load election status.</p>`;\n        }\n    }\n\n    // --- Event Listeners ---\
    if (refreshButton) {\n        refreshButton.addEventListener(\'click\', () => {\n            loadResults();\n            loadElectionStatus();\n        });\n    }\n\n    // --- Initial Load ---\
    loadResults();\n    loadElectionStatus();\n\n    // Optional: Auto-refresh every 30 seconds\n    setInterval(() => {\n        loadResults();\n        loadElectionStatus();\n    }, 30000);\n});\n